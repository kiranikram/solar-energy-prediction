cd Work/solar-energy-prediction/batch_jobs

sbatch train.sh

sbatch predict_transformer.sh
sbatch train_transformer.sh



    for i in range(100):
        x = torch.Tensor([data[i]])
        x = x.unsqueeze(0).long().to(DEVICE)
        
        y = torch.Tensor([Y[i]])
        y = y.to(DEVICE)

        y_t1 = Y[i + 1]

        with torch.no_grad():
            output = model(x, y)
            output = output.cpu().item()
            print(y_t1, ':', output)
            actual_results.append(y_t1 * 100)
            future_preditions.append(output * 100)

    
    #ground_truths = scaler.inverse_transform(np.array(actual_results).reshape(-1, 1))

    #predictions = scaler.inverse_transform(np.array(future_preditions).reshape(-1, 1))




    test_val_split_size = int(len(df) * 0.2)

test_val_split_indicies = np.random.choice(len(df) - 1, test_val_split_size, replace=False)
test_indices = test_val_split_indicies[0: int(len(test_val_split_indicies)/ 2)]
val_indices = test_val_split_indicies[int(len(test_val_split_indicies)/ 2): ]

df_test = df.loc[test_indices]
df = df.drop(test_indices)
df_val = df.loc[val_indices]
df = df.drop(val_indices)